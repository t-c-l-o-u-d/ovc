name: CI

on: 
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust: [stable]

    steps:
      - uses: actions/checkout@v4
      - name: Update Rust (Ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          rustup default stable
          rustup component add rustfmt clippy
      - name: Update Rust (macOS only)
        if: matrix.os == 'macos-latest'
        run: |
          # macOS doesn't have Rust by default, so we'll install it
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          source ~/.cargo/env
          rustup component add rustfmt clippy
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Cache target directory
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-target-
      - name: Check formatting
        run: |
          source ~/.cargo/env 2>/dev/null || true
          cargo fmt --all -- --check
      - name: Run clippy
        run: |
          source ~/.cargo/env 2>/dev/null || true
          cargo clippy --all-targets --all-features -- -D warnings
      - name: Build
        run: |
          source ~/.cargo/env 2>/dev/null || true
          cargo build --verbose
      - name: Run tests
        run: |
          source ~/.cargo/env 2>/dev/null || true
          cargo test --verbose
      - name: Run tests with release build
        run: |
          source ~/.cargo/env 2>/dev/null || true
          cargo test --release --verbose

  cross-compile:
    name: Cross Compile Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - aarch64-unknown-linux-gnu
          - x86_64-apple-darwin
          - aarch64-apple-darwin

    steps:
      - uses: actions/checkout@v4
      - name: Install Rust and targets
        run: |
          sudo apt-get update
          sudo apt-get install -y rustc cargo
          rustup default stable
          rustup target add ${{ matrix.target }}
      - name: Install cross-compilation tools
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo dpkg --add-architecture arm64
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu libssl-dev:arm64
      - name: Configure cross-compilation
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          mkdir -p ~/.cargo
          echo '[target.aarch64-unknown-linux-gnu]' >> ~/.cargo/config.toml
          echo 'linker = "aarch64-linux-gnu-gcc"' >> ~/.cargo/config.toml
        env:
          PKG_CONFIG_ALLOW_CROSS: 1
          PKG_CONFIG_PATH: /usr/lib/aarch64-linux-gnu/pkgconfig
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: cross-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Check build for target
        run: |
          source ~/.cargo/env 2>/dev/null || true
          cargo check --target ${{ matrix.target }} --verbose
        env:
          PKG_CONFIG_ALLOW_CROSS: ${{ matrix.target == 'aarch64-unknown-linux-gnu' && '1' || '' }}
          PKG_CONFIG_PATH: ${{ matrix.target == 'aarch64-unknown-linux-gnu' && '/usr/lib/aarch64-linux-gnu/pkgconfig' || '' }}

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        run: |
          sudo apt-get update
          sudo apt-get install -y rustc cargo
          rustup default stable
      - name: Install cargo-audit
        run: |
          source ~/.cargo/env 2>/dev/null || true
          cargo install cargo-audit
      - name: Run security audit
        run: |
          source ~/.cargo/env 2>/dev/null || true
          cargo audit
