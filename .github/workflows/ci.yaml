name: CI

on: 
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  CARGO_TERM_COLOR: always

jobs:
  # Step 1: Lint first
  lint:
    name: Lint
    uses: ./.github/workflows/lint.yaml

  # Step 2: Security audit after lint
  security:
    name: Security Audit
    needs: [lint]
    uses: ./.github/workflows/security.yaml

  # Step 3: Test after security
  test:
    name: Test
    needs: [security]
    uses: ./.github/workflows/test.yaml

  # Step 3: All build jobs run in parallel after quality checks pass
  build-linux-x86_64:
    name: Build Linux x86_64
    needs: [lint, security, test]
    uses: ./.github/workflows/build-linux-x86_64.yaml

  # TEMPORARILY DISABLED - ARM64 Linux build
  # build-linux-arm64:
  #   name: Build Linux ARM64
  #   needs: [lint, security, test]
  #   uses: ./.github/workflows/build-linux-arm64.yaml

  build-macos-x86_64:
    name: Build macOS x86_64
    needs: [lint, security, test]
    uses: ./.github/workflows/build-macos-x86_64.yaml

  build-macos-arm64:
    name: Build macOS ARM64
    needs: [lint, security, test]
    uses: ./.github/workflows/build-macos-arm64.yaml

  # Step 4: Release (only runs if all builds succeed and version changed)
  release:
    name: Create Release
    needs: [build-linux-x86_64, build-macos-x86_64, build-macos-arm64]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Check if version changed
        id: version_check
        run: |
          if git diff HEAD~1 HEAD --name-only | grep -q "Cargo.toml"; then
            CURRENT_VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Version changed to: $CURRENT_VERSION"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "No version change detected"
          fi
      
      - name: Download all artifacts
        if: steps.version_check.outputs.changed == 'true'
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
      
      - name: Create Release
        if: steps.version_check.outputs.changed == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version_check.outputs.version }}
          release_name: Release v${{ steps.version_check.outputs.version }}
          draft: false
          prerelease: false
      
      - name: Upload Release Assets
        if: steps.version_check.outputs.changed == 'true'
        run: |
          for file in ./artifacts/**/*; do
            if [ -f "$file" ]; then
              echo "Would upload: $file"
              # Add actual upload logic here when needed
            fi
          done
