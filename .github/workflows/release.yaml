name: Release

on:
  push:
    branches: [main]
    paths: [Cargo.toml]
  workflow_dispatch:

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  CARGO_TERM_COLOR: always

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.check.outputs.changed }}
      new_version: ${{ steps.check.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Check if version changed
        id: check
        run: |
          # Get current version from Cargo.toml
          CURRENT_VERSION=$(grep '^version = ' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          echo "Current version: $CURRENT_VERSION"
          
          # Check if this is a manual dispatch
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Get previous version from Cargo.toml
          git checkout HEAD~1 -- Cargo.toml 2>/dev/null || echo "No previous version found"
          PREVIOUS_VERSION=$(grep '^version = ' Cargo.toml | sed 's/version = "\(.*\)"/\1/' 2>/dev/null || echo "")
          
          # Restore current Cargo.toml
          git checkout HEAD -- Cargo.toml
          
          echo "Previous version: $PREVIOUS_VERSION"
          
          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ] && [ -n "$PREVIOUS_VERSION" ]; then
            echo "Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          else
            echo "Version unchanged"
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

  create-tag:
    needs: check-version
    if: needs.check-version.outputs.version_changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Create and push tag
        run: |
          VERSION="v${{ needs.check-version.outputs.new_version }}"
          echo "Creating tag: $VERSION"
          
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Create and push tag
          git tag "$VERSION"
          git push origin "$VERSION"

  macos:
    needs: [check-version, create-tag]
    if: needs.check-version.outputs.version_changed == 'true'
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4
      - name: Install Rust and targets
        run: |
          # macOS doesn't have Rust by default, so we'll install it
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          source ~/.cargo/env
          rustup target add aarch64-apple-darwin x86_64-apple-darwin
      - name: Test x86_64
        run: |
          source ~/.cargo/env
          cargo test --release --target=x86_64-apple-darwin
      - name: Build x86_64
        run: |
          source ~/.cargo/env
          cargo build --release --target=x86_64-apple-darwin
      - name: Build ARM64
        run: |
          source ~/.cargo/env
          cargo build --release --target=aarch64-apple-darwin
      - name: Strip binaries
        run: |
          source ~/.cargo/env
          strip target/x86_64-apple-darwin/release/ovc
          strip target/aarch64-apple-darwin/release/ovc
      - name: Upload x86_64 binary
        run: |
          source ~/.cargo/env
          cp ./target/x86_64-apple-darwin/release/ovc ./ovc-macos-x86_64
          chmod +x ./ovc-macos-x86_64
          ./.github/workflows/upload_asset.sh ./ovc-macos-x86_64 $GITHUB_TOKEN
      - name: Upload ARM64 binary
        run: |
          source ~/.cargo/env
          cp ./target/aarch64-apple-darwin/release/ovc ./ovc-macos-arm64
          chmod +x ./ovc-macos-arm64
          ./.github/workflows/upload_asset.sh ./ovc-macos-arm64 $GITHUB_TOKEN

  linux:
    needs: [check-version, create-tag]
    if: needs.check-version.outputs.version_changed == 'true'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Install Rust and cross-compilation tools
        run: |
          sudo apt-get update
          sudo apt-get install -y rustc cargo gcc-aarch64-linux-gnu
          rustup default stable
          rustup target add aarch64-unknown-linux-gnu x86_64-unknown-linux-gnu
      - name: Configure cross-compilation
        run: |
          mkdir -p ~/.cargo
          echo '[target.aarch64-unknown-linux-gnu]' >> ~/.cargo/config.toml
          echo 'linker = "aarch64-linux-gnu-gcc"' >> ~/.cargo/config.toml
      - name: Test x86_64
        run: |
          source ~/.cargo/env 2>/dev/null || true
          cargo test --release
      - name: Build x86_64
        run: |
          source ~/.cargo/env 2>/dev/null || true
          cargo build --release --target=x86_64-unknown-linux-gnu
      - name: Build ARM64
        run: |
          source ~/.cargo/env 2>/dev/null || true
          cargo build --release --target=aarch64-unknown-linux-gnu
      - name: Strip binaries
        run: |
          source ~/.cargo/env 2>/dev/null || true
          strip target/x86_64-unknown-linux-gnu/release/ovc
          aarch64-linux-gnu-strip target/aarch64-unknown-linux-gnu/release/ovc
      - name: Upload x86_64 binary
        run: |
          source ~/.cargo/env 2>/dev/null || true
          cp ./target/x86_64-unknown-linux-gnu/release/ovc ./ovc-linux-x86_64
          chmod +x ./ovc-linux-x86_64
          ./.github/workflows/upload_asset.sh ./ovc-linux-x86_64 $GITHUB_TOKEN
      - name: Upload ARM64 binary
        run: |
          source ~/.cargo/env 2>/dev/null || true
          cp ./target/aarch64-unknown-linux-gnu/release/ovc ./ovc-linux-arm64
          chmod +x ./ovc-linux-arm64
          ./.github/workflows/upload_asset.sh ./ovc-linux-arm64 $GITHUB_TOKEN

  generate-checksums:
    needs: [check-version, create-tag, macos, linux]
    if: needs.check-version.outputs.version_changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Download release assets and generate checksums
        run: |
          VERSION="v${{ needs.check-version.outputs.new_version }}"
          
          # Wait a moment for assets to be fully uploaded
          sleep 10
          
          # Create directory for assets
          mkdir -p assets
          cd assets
          
          # Download all assets
          echo "Downloading release assets..."
          gh release download "$VERSION" --pattern "ovc-*" || echo "Some assets may not be available yet"
          
          # Generate checksums for available files
          if ls ovc-* 1> /dev/null 2>&1; then
            sha256sum ovc-* > ../SHA256SUMS
            echo "Generated checksums:"
            cat ../SHA256SUMS
            
            # Upload checksums file
            cd ..
            gh release upload "$VERSION" SHA256SUMS
          else
            echo "No binary assets found to checksum"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
